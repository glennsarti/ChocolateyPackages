$script:ChocoPackageName = 'pdk-community'

Function Invoke-GenerateReadMe($RootDir) {
  $CommunityPkgs = @{}
  $CommunityDevPkgs = @{}

  # Categorise packages
  Get-ChildItem -Path "$RootDir" |
    Where-Object { ($_.PSIsContainer) -and ($_.name -like ($script:ChocoPackageName + '-*')) } | ForEach-Object {
      $thisFolder = $_
      $dirName = $thisFolder.Name

      if ($dirName -like ($script:ChocoPackageName + '-*')) {
        $pkgNuspec = (Get-ChildItem -Path ($thisFolder.FullName) -Filter '*.nuspec' | Select-Object -First 1)
        if ($pkgNuspec -eq $null) { Throw "Directory $dirName does not contain a nuget spec file"}
        $pkgManifest = [xml](Get-Content -Path $pkgNuspec.Fullname)
        $pkgVersion = $pkgManifest.package.metadata.version.ToString()

        if ($pkgVersion -match '-') {
          $CommunityDevPkgs.Add($pkgVersion,$thisFolder.Name)
        } else {
          $CommunityPkgs.Add($pkgVersion,$thisFolder.Name)
        }
      }
    }

  # Generate Readme texts
  $PkgListText = ""
  $CommunityPkgs.Keys | Sort-Object -Descending | % {
    $PkgListText += "* [Package version $($_.ToUpper())]($($CommunityPkgs[$_])/)`n"
  }
  $DevPkgListText = ""
  $CommunityDevPkgs.Keys | Sort-Object -Descending | % {
    $DevPkgListText += "* [Package version $($_.ToUpper())]($($CommunityDevPkgs[$_])/)`n"
  }

  $ReadmeContent = @"
## What is this?
This project is a collection Chocolatey packages to install community based applications onto Windows.

### $($script:ChocoPackageName)

[Chocolatey Package](https://chocolatey.org/packages/$($script:ChocoPackageName))

Standard Releases
$PkgListText

Beta Releases
$DevPkgListText

### Links
https://chocolatey.org

https://puppet.com/download-puppet-development-kit

---

This file is automatically generated
"@
  Write-Host "Creating README.md ..."
  Out-File -InputObject $ReadmeContent -FilePath "$($RootDir)\README.md" -Encoding ASCII -Force -Confirm:$false
}
